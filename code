import CodeWorld
import Data.List
import Data.Text(pack, unpack)
import System.Random


type RandomNumber = Int
gridSize = 0.5
gridSizeHf = 0.25


main :: IO()
main = do 
    gen <- getStdGen -- what is stdGen??
    activityOf(initialWorld gen) handleEvent drawWorld --初始化， 事件环境，游戏框架
    
    
    
data GameState = GameIdle                    -- game states
                | GameRunning
                | Gameover
                deriving(Show,Eq) 
                
             
data World = World {
      rnds    ::[RandomNumber]
    , state   :: GameState
    , snake   :: Snake
    , apple   :: Apple
    , areaWidth    :: Double 
    , arenaHeight  :: Double 
   }
   
data Direction = DirectUp
              | DirectDown
              | DirectLeft
              | DirectRight
              deriving(Show, Eq, Ord) -- for convience, compile will automatic do it for me
       
       -- action of Snake
data Act = NoAct  
          | Move
          | Eat
          | Dead
           deriving(Show, Eq)
              
data Snake = Snake {
      body  :: [Point]
    , ds    ::  Double
    , score :: Int
    , direct :: Direction
    , color :: Color
    , width :: Double
    }
 
data Apple = Apple{
     position :: Point
   , colorA   :: Color
   , widthA   :: Double
}
snakeSpeed = 2

 --initialize world by calling restartWorld fucntion
initialWorld :: StdGen -> World   
initialWorld gen = restartWorld rnds width height 
    where rnds = randomRs(round (0 - width), round(width - 2)) gen --generate -width to witdth random number
          width = 20 :: Double
          height = 20 :: Double
        
--initialize world
restartWorld :: [RandomNumber] -> Double -> Double -> World
restartWorld rnds width height = World rnds' GameRunning snake apple width height
    where snake = mkSnake(-1, 0) 3 green  -- initialize the coordinates of snake, its length and color
          apple = mkApple ((fromIntegral a1) / 2, (fromIntegral a2) / 2) red
          (a1:a2:rnds') = rnds
 
drawWorld :: World -> Picture
drawWorld world
    | state world == Gameover = draw world
                              & translated 0 (1)
                                (styledLettering Bold Handwriting 
                                                  (pack "Game Over!"))
                              & translated 0 (-1)
                                (styledLettering Bold Handwriting
                                                  (pack score1_str))
                          
    | otherwise   = draw world
      where draw world = drawSnake (snake world)
                       & drawApple (apple world)
                       & rectangle(areaWidth world) (arenaHeight world)
            score1_str = "Score: " ++ (show $ score $ snake world)

handleEvent :: Event -> World -> World
handleEvent (TimePassing dt) w
    | state w == Gameover = w
    | otherwise = handleSnakeAction snake' action
                $ w
      where (snake', action) = checkSnakeAction dt w (snake w)


handleEvent (KeyPress keyText) w
    | state w == Gameover
      && unpack keyText == "Enter" = restartWorld (rnds w) areaW areaH
    | unpack keyText == "Up" = w { snake = turnSnake DirectUp snake' }
    | unpack keyText == "Down" = w { snake = turnSnake DirectDown snake' }
    | unpack keyText == "Left" = w { snake = turnSnake DirectLeft snake' }
    | unpack keyText == "Right" = w { snake = turnSnake DirectRight snake' }
    | otherwise = w
      where snake' = snake w
            areaW = areaWidth w
            areaH = arenaHeight w
handleEvent _ w = w

handleSnakeAction snake' action w
  | action == Move = w { snake = moveSnake snake'}
  | action == Eat = w { snake = eating snake'
                           , apple = apple'
                           , rnds = rnds' }
                     
  | action == NoAct = w { snake = snake'}
  | action == Dead = w { state = Gameover }
    where (apple', rnds' ) = randomApple w
    
-- Check whether the snake has collision
checkSnakeAction :: Double -> World ->Snake
                 -> (Snake, Act)
checkSnakeAction dt world snakeS
    = if ds' > snkW then (snakeS{ ds = 0 }, action) -- if the timeeclips do not make snake move, then stay
                    else (snakeS { ds = ds' }, action1)
    where ds' = ds snakeS + dt * snakeSpeed
          snkW = width snakeS
          headOrg = head $ body snakeS
          headN = translatedPoint dx dy headOrg
          (dx, dy) = getSnakeDxDy snakeS
          
          appleOrg = apple world
          (snkHead:snkTail) = body $ snake world
          
          action = if headN == position appleOrg 
                   then Eat  
                   else Move
          action1 = if headOrg `elem` snkTail
                      || outofBound headOrg
                    then Dead
                    else NoAct
                    
          outofBound (x, y) = if x < 0 - maxW || x > maxW - gridSize
                                || y < 0 - maxH || y > maxH - gridSize
                              then True
                              else False
          maxW = areaWidth world / 2
          maxH = arenaHeight world / 2




mkSnake ::  Point -> Int -> Color -> Snake
mkSnake startPoint len color = Snake body 0 0 DirectUp color w
  where body = unfoldr(\i -> if i < len
                              then Just (( x, y - w * fromIntegral i), i + 1)
                              else Nothing)
                          0
        (x,y) = startPoint
        w     = gridSize 
        
drawSnake :: Snake -> Picture
drawSnake snake = foldr1(&) blks 
    where blks = map(colored snkColor. drawBodyBlk) snkBody --make all the body bucket become colored bucket
          snkColor = color snake
          snkBody = body snake
          drawBodyBlk (x, y) = translated( x + gridSizeHf) (y + gridSizeHf)
                              $ solidRectangle( w - 0.05) ( w- 0.05) --make the snake beatiful
          w = width snake                     
                       

turnSnake :: Direction -> Snake -> Snake
turnSnake dir snake = if isConflictDirect dir(direct snake)
                      then snake
                      else snake{ direct = dir}
    where isConflictDirect direct1 direct2 
            | direct1 == DirectUp && direct2 == DirectDown = True
            | direct1 == DirectDown  && direct2 == DirectUp = True
            | direct1 == DirectLeft && direct2 == DirectRight = True
            | direct1 == DirectRight  && direct2 == DirectLeft = True
            | otherwise = False
    
 
 
moveSnake :: Snake -> Snake
moveSnake snake = snake { ds = 0, body = pts }
       where ptsOrg = body snake
             pts = pt : init ptsOrg --remove the last block that snake current in plus one block more
             pt = translatedPoint dx dy $ head ptsOrg 
             (dx, dy) = getSnakeDxDy snake
             
eating :: Snake -> Snake
eating snake = snake {ds = 0, score = score', body = pts}
        where ptsOrg = body snake
              pts = pt : ptsOrg -- do not need to remove the last block
              pt = translatedPoint dx dy $ head ptsOrg 
              (dx, dy) = getSnakeDxDy snake
              score' = score snake + 5
              



getSnakeDxDy snake@(Snake _ _ _ direct _ w)
    | direct == DirectUp  = (0, w)
    | direct == DirectDown  = (0, -w)
    | direct == DirectLeft  = (-w, 0)
    | direct == DirectRight  = (w, 0)
    


mkApple :: Point -> Color -> Apple
mkApple pos color = Apple pos color 0.25

drawApple :: Apple -> Picture
drawApple apple@(Apple pos color width)
    = translated ( x + gridSizeHf) (y + gridSizeHf)
    $ colored color
    $ solidCircle width 
    where (x, y) = pos
    
randomApple world@(World rnds _ _ apple w h) = (mkApple pos color, rnds') --why have simicolon??
    where color = red --if colorOrg == red then green else red
          pos = (( fromIntegral r1) /2, (fromIntegral r2) / 2)
          (r1:r2:rnds') = rnds
          colorOrg = colorA apple

    
